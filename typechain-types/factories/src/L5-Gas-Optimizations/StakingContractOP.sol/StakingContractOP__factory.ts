/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  StakingContractOP,
  StakingContractOPInterface,
} from "../../../../src/L5-Gas-Optimizations/StakingContractOP.sol/StakingContractOP";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_stakingToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "NoAccumulatedRewards",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "reward",
        type: "uint256",
      },
    ],
    name: "RewardPaid",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Staked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [],
    name: "REWARD_RATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "pendingReward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "stakers",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stakingToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "updateAllRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "updateReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userInfo",
    outputs: [
      {
        internalType: "uint256",
        name: "stakedAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastUpdateBlock",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rewardsAccumulated",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561000f575f5ffd5b5060405161089438038061089483398101604081905261002e9161003f565b6001600160a01b031660805261006c565b5f6020828403121561004f575f5ffd5b81516001600160a01b0381168114610065575f5ffd5b9392505050565b6080516107fb6100995f395f81816101300152818161020f0152818161037d01526104e101526107fb5ff3fe608060405234801561000f575f5ffd5b506004361061009b575f3560e01c8063a694fc3a11610063578063a694fc3a1461016a578063b88a802f1461017d578063d869a0db14610185578063f40f0f521461018d578063fd5e6dd1146101a0575f5ffd5b80631959a0021461009f5780632e1a7d4d146100ed5780635997bb3714610102578063632447c91461011857806372f702f31461012b575b5f5ffd5b6100cd6100ad3660046106d8565b5f6020819052908152604090208054600182015460029092015490919083565b604080519384526020840192909252908201526060015b60405180910390f35b6101006100fb366004610705565b6101b3565b005b61010a606481565b6040519081526020016100e4565b6101006101263660046106d8565b6102bc565b6101527f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100e4565b610100610178366004610705565b61033d565b610100610485565b610100610586565b61010a61019b3660046106d8565b61061d565b6101526101ae366004610705565b6106b0565b335f90815260208190526040902080548211156101e357604051631e9acf1760e31b815260040160405180910390fd5b6101ec336102bc565b8054829003815560405163a9059cbb60e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303815f875af115801561025d573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610281919061071c565b5060405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a25050565b6001600160a01b0381165f9081526020819052604081206001810154909190670de0b6b3a7640000906102ef904361074f565b83546102fd90606490610768565b6103079190610768565b610311919061077f565b905080156103385780826002015f82825461032c919061079e565b90915550504360018301555b505050565b335f90815260208190526040902080541561035b5761035b336102bc565b6040516323b872dd60e01b8152336004820152306024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303815f875af11580156103cb573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103ef919061071c565b5081815f015f828254610402919061079e565b909155505060018101545f03610453576001805480820182555f919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b031916331790555b60405182815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d906020016102b0565b61048e336102bc565b335f9081526020819052604090206002810154806104bf576040516320c4ab2d60e11b815260040160405180910390fd5b5f600283015560405163a9059cbb60e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303815f875af115801561052f573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610553919061071c565b5060405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486906020016102b0565b5f60018054806020026020016040519081016040528092919081815260200182805480156105db57602002820191905f5260205f20905b81546001600160a01b031681526001909101906020018083116105bd575b509394505f93505050505b815181101561061957610611828281518110610604576106046107b1565b60200260200101516102bc565b6001016105e6565b5050565b6001600160a01b0381165f9081526020818152604080832081516060810183528154808252600183015494820194909452600290910154918101829052918303610668579392505050565b5f670de0b6b3a7640000836020015143610682919061074f565b845161069090606490610768565b61069a9190610768565b6106a4919061077f565b91909101949350505050565b600181815481106106bf575f80fd5b5f918252602090912001546001600160a01b0316905081565b5f602082840312156106e8575f5ffd5b81356001600160a01b03811681146106fe575f5ffd5b9392505050565b5f60208284031215610715575f5ffd5b5035919050565b5f6020828403121561072c575f5ffd5b815180151581146106fe575f5ffd5b634e487b7160e01b5f52601160045260245ffd5b818103818111156107625761076261073b565b92915050565b80820281158282048414176107625761076261073b565b5f8261079957634e487b7160e01b5f52601260045260245ffd5b500490565b808201808211156107625761076261073b565b634e487b7160e01b5f52603260045260245ffdfea2646970667358221220fb6da549923365af15c59407198d5f79f4738cd1aaa66f50247798704b3ae25564736f6c634300081c0033";

type StakingContractOPConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingContractOPConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakingContractOP__factory extends ContractFactory {
  constructor(...args: StakingContractOPConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _stakingToken: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_stakingToken, overrides || {});
  }
  override deploy(
    _stakingToken: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_stakingToken, overrides || {}) as Promise<
      StakingContractOP & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): StakingContractOP__factory {
    return super.connect(runner) as StakingContractOP__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingContractOPInterface {
    return new Interface(_abi) as StakingContractOPInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): StakingContractOP {
    return new Contract(address, _abi, runner) as unknown as StakingContractOP;
  }
}
