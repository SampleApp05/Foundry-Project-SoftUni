/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  StakingContract,
  StakingContractInterface,
} from "../../../../src/L5-Gas-Optimizations/StakingContract.sol/StakingContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_stakingToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "reward",
        type: "uint256",
      },
    ],
    name: "RewardPaid",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Staked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [],
    name: "claimReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "pendingReward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "stakers",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stakingToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "updateAllRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "updateReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userInfo",
    outputs: [
      {
        internalType: "uint256",
        name: "stakedAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastUpdateBlock",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rewardsAccumulated",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405260646001553480156013575f5ffd5b5060405161087d38038061087d8339810160408190526030916053565b5f80546001600160a01b0319166001600160a01b0392909216919091179055607e565b5f602082840312156062575f5ffd5b81516001600160a01b03811681146077575f5ffd5b9392505050565b6107f28061008b5f395ff3fe608060405234801561000f575f5ffd5b506004361061009b575f3560e01c8063a694fc3a11610063578063a694fc3a14610155578063b88a802f14610168578063d869a0db14610170578063f40f0f5214610178578063fd5e6dd11461018b575f5ffd5b80631959a0021461009f5780632e1a7d4d146100ec578063632447c91461010157806372f702f3146101145780637b0a47ee1461013e575b5f5ffd5b6100cc6100ad3660046106d6565b600260208190525f918252604090912080546001820154919092015483565b604080519384526020840192909252908201526060015b60405180910390f35b6100ff6100fa3660046106fc565b61019e565b005b6100ff61010f3660046106d6565b61030f565b5f54610126906001600160a01b031681565b6040516001600160a01b0390911681526020016100e3565b61014760015481565b6040519081526020016100e3565b6100ff6101633660046106fc565b610397565b6100ff6104ef565b6100ff6105ce565b6101476101863660046106d6565b610611565b6101266101993660046106fc565b6106ae565b5f81116101e65760405162461bcd60e51b8152602060048201526011602482015270043616e6e6f74207769746864726177203607c1b60448201526064015b60405180910390fd5b335f908152600260205260409020548111156102385760405162461bcd60e51b8152602060048201526011602482015270139bdd08195b9bdd59da081cdd185ad959607a1b60448201526064016101dd565b6102413361030f565b335f908152600260205260408120805483929061025f908490610727565b90915550505f5460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303815f875af11580156102b1573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102d59190610740565b5060405181815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a250565b6001600160a01b0381165f90815260026020526040902080541561038d575f81600101544361033e9190610727565b90505f670de0b6b3a764000082600154855f015461035c919061075f565b610366919061075f565b6103709190610776565b905080836002015f8282546103859190610795565b909155505050505b4360019091015550565b5f81116103d75760405162461bcd60e51b815260206004820152600e60248201526d043616e6e6f74207374616b6520360941b60448201526064016101dd565b6103e03361030f565b5f546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303815f875af1158015610433573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104579190610740565b50335f9081526002602052604081208054839290610476908490610795565b9091555050600380546001810182555f919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b031916339081179091556040518281527f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d90602001610304565b6104f83361030f565b335f908152600260208190526040909120015480156105cb57335f8181526002602081905260408083209091018290559054905163a9059cbb60e01b81526004810192909252602482018390526001600160a01b03169063a9059cbb906044016020604051808303815f875af1158015610574573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105989190610740565b5060405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048690602001610304565b50565b5f5b6003548110156105cb57610609600382815481106105f0576105f06107a8565b5f918252602090912001546001600160a01b031661030f565b6001016105d0565b6001600160a01b0381165f9081526002602081815260408084208151606081018352815480825260018301549482019490945293015490830181905290156106a7575f8260200151436106649190610727565b90505f670de0b6b3a764000082600154865f0151610682919061075f565b61068c919061075f565b6106969190610776565b90506106a28184610795565b925050505b9392505050565b600381815481106106bd575f80fd5b5f918252602090912001546001600160a01b0316905081565b5f602082840312156106e6575f5ffd5b81356001600160a01b03811681146106a7575f5ffd5b5f6020828403121561070c575f5ffd5b5035919050565b634e487b7160e01b5f52601160045260245ffd5b8181038181111561073a5761073a610713565b92915050565b5f60208284031215610750575f5ffd5b815180151581146106a7575f5ffd5b808202811582820484141761073a5761073a610713565b5f8261079057634e487b7160e01b5f52601260045260245ffd5b500490565b8082018082111561073a5761073a610713565b634e487b7160e01b5f52603260045260245ffdfea26469706673582212203acc1f9a1e2f7751881a4e568c8724a846e35378d5513c66e0224006ba7f60b764736f6c634300081c0033";

type StakingContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakingContract__factory extends ContractFactory {
  constructor(...args: StakingContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _stakingToken: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_stakingToken, overrides || {});
  }
  override deploy(
    _stakingToken: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_stakingToken, overrides || {}) as Promise<
      StakingContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): StakingContract__factory {
    return super.connect(runner) as StakingContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingContractInterface {
    return new Interface(_abi) as StakingContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): StakingContract {
    return new Contract(address, _abi, runner) as unknown as StakingContract;
  }
}
