/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace RaffleHouse {
  export type RaffleStruct = {
    ticketPrice: BigNumberish;
    raffleStart: BigNumberish;
    raffleEnd: BigNumberish;
    ticketsContract: AddressLike;
    winningTicketIndex: BigNumberish;
  };

  export type RaffleStructOutput = [
    ticketPrice: bigint,
    raffleStart: bigint,
    raffleEnd: bigint,
    ticketsContract: string,
    winningTicketIndex: bigint
  ] & {
    ticketPrice: bigint;
    raffleStart: bigint;
    raffleEnd: bigint;
    ticketsContract: string;
    winningTicketIndex: bigint;
  };
}

export interface RaffleHouseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MIN_DURATION"
      | "buyTicket"
      | "chooseWinner"
      | "claimPrize"
      | "createRaffle"
      | "getRaffle"
      | "getRaffleCount"
      | "raffleCount"
      | "raffles"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "PrizeClaimed"
      | "RaffleCreated"
      | "TicketPurchased"
      | "WinnerChosen"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MIN_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyTicket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chooseWinner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPrize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createRaffle",
    values: [BigNumberish, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRaffle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRaffleCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raffleCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raffles",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MIN_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chooseWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimPrize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRaffle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRaffleCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raffleCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "raffles", data: BytesLike): Result;
}

export namespace PrizeClaimedEvent {
  export type InputTuple = [
    raffleId: BigNumberish,
    winner: AddressLike,
    prizeAmount: BigNumberish
  ];
  export type OutputTuple = [
    raffleId: bigint,
    winner: string,
    prizeAmount: bigint
  ];
  export interface OutputObject {
    raffleId: bigint;
    winner: string;
    prizeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RaffleCreatedEvent {
  export type InputTuple = [
    raffleId: BigNumberish,
    ticketPrice: BigNumberish,
    raffleStart: BigNumberish,
    raffleEnd: BigNumberish,
    raffleName: string,
    raffleSymbol: string
  ];
  export type OutputTuple = [
    raffleId: bigint,
    ticketPrice: bigint,
    raffleStart: bigint,
    raffleEnd: bigint,
    raffleName: string,
    raffleSymbol: string
  ];
  export interface OutputObject {
    raffleId: bigint;
    ticketPrice: bigint;
    raffleStart: bigint;
    raffleEnd: bigint;
    raffleName: string;
    raffleSymbol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketPurchasedEvent {
  export type InputTuple = [
    raffleId: BigNumberish,
    buyer: AddressLike,
    ticketId: BigNumberish
  ];
  export type OutputTuple = [raffleId: bigint, buyer: string, ticketId: bigint];
  export interface OutputObject {
    raffleId: bigint;
    buyer: string;
    ticketId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnerChosenEvent {
  export type InputTuple = [
    raffleId: BigNumberish,
    winningTicketIndex: BigNumberish
  ];
  export type OutputTuple = [raffleId: bigint, winningTicketIndex: bigint];
  export interface OutputObject {
    raffleId: bigint;
    winningTicketIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RaffleHouse extends BaseContract {
  connect(runner?: ContractRunner | null): RaffleHouse;
  waitForDeployment(): Promise<this>;

  interface: RaffleHouseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MIN_DURATION: TypedContractMethod<[], [bigint], "view">;

  buyTicket: TypedContractMethod<[raffleId: BigNumberish], [void], "payable">;

  chooseWinner: TypedContractMethod<
    [raffleId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimPrize: TypedContractMethod<
    [raffleId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createRaffle: TypedContractMethod<
    [
      ticketPrice: BigNumberish,
      raffleStart: BigNumberish,
      raffleEnd: BigNumberish,
      raffleName: string,
      raffleSymbol: string
    ],
    [void],
    "nonpayable"
  >;

  getRaffle: TypedContractMethod<
    [raffleId: BigNumberish],
    [RaffleHouse.RaffleStructOutput],
    "view"
  >;

  getRaffleCount: TypedContractMethod<[], [bigint], "view">;

  raffleCount: TypedContractMethod<[], [bigint], "view">;

  raffles: TypedContractMethod<
    [raffleId: BigNumberish],
    [
      [bigint, bigint, bigint, string, bigint] & {
        ticketPrice: bigint;
        raffleStart: bigint;
        raffleEnd: bigint;
        ticketsContract: string;
        winningTicketIndex: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MIN_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyTicket"
  ): TypedContractMethod<[raffleId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "chooseWinner"
  ): TypedContractMethod<[raffleId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimPrize"
  ): TypedContractMethod<[raffleId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createRaffle"
  ): TypedContractMethod<
    [
      ticketPrice: BigNumberish,
      raffleStart: BigNumberish,
      raffleEnd: BigNumberish,
      raffleName: string,
      raffleSymbol: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRaffle"
  ): TypedContractMethod<
    [raffleId: BigNumberish],
    [RaffleHouse.RaffleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRaffleCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "raffleCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "raffles"
  ): TypedContractMethod<
    [raffleId: BigNumberish],
    [
      [bigint, bigint, bigint, string, bigint] & {
        ticketPrice: bigint;
        raffleStart: bigint;
        raffleEnd: bigint;
        ticketsContract: string;
        winningTicketIndex: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "PrizeClaimed"
  ): TypedContractEvent<
    PrizeClaimedEvent.InputTuple,
    PrizeClaimedEvent.OutputTuple,
    PrizeClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RaffleCreated"
  ): TypedContractEvent<
    RaffleCreatedEvent.InputTuple,
    RaffleCreatedEvent.OutputTuple,
    RaffleCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TicketPurchased"
  ): TypedContractEvent<
    TicketPurchasedEvent.InputTuple,
    TicketPurchasedEvent.OutputTuple,
    TicketPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "WinnerChosen"
  ): TypedContractEvent<
    WinnerChosenEvent.InputTuple,
    WinnerChosenEvent.OutputTuple,
    WinnerChosenEvent.OutputObject
  >;

  filters: {
    "PrizeClaimed(uint256,address,uint256)": TypedContractEvent<
      PrizeClaimedEvent.InputTuple,
      PrizeClaimedEvent.OutputTuple,
      PrizeClaimedEvent.OutputObject
    >;
    PrizeClaimed: TypedContractEvent<
      PrizeClaimedEvent.InputTuple,
      PrizeClaimedEvent.OutputTuple,
      PrizeClaimedEvent.OutputObject
    >;

    "RaffleCreated(uint256,uint256,uint256,uint256,string,string)": TypedContractEvent<
      RaffleCreatedEvent.InputTuple,
      RaffleCreatedEvent.OutputTuple,
      RaffleCreatedEvent.OutputObject
    >;
    RaffleCreated: TypedContractEvent<
      RaffleCreatedEvent.InputTuple,
      RaffleCreatedEvent.OutputTuple,
      RaffleCreatedEvent.OutputObject
    >;

    "TicketPurchased(uint256,address,uint256)": TypedContractEvent<
      TicketPurchasedEvent.InputTuple,
      TicketPurchasedEvent.OutputTuple,
      TicketPurchasedEvent.OutputObject
    >;
    TicketPurchased: TypedContractEvent<
      TicketPurchasedEvent.InputTuple,
      TicketPurchasedEvent.OutputTuple,
      TicketPurchasedEvent.OutputObject
    >;

    "WinnerChosen(uint256,uint256)": TypedContractEvent<
      WinnerChosenEvent.InputTuple,
      WinnerChosenEvent.OutputTuple,
      WinnerChosenEvent.OutputObject
    >;
    WinnerChosen: TypedContractEvent<
      WinnerChosenEvent.InputTuple,
      WinnerChosenEvent.OutputTuple,
      WinnerChosenEvent.OutputObject
    >;
  };
}
