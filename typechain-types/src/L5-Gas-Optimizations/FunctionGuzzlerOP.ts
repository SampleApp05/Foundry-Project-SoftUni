/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface FunctionGuzzlerOPInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addValue"
      | "deposit"
      | "findUser"
      | "getAverageValue"
      | "getBalance"
      | "isRegistered"
      | "registerUser"
      | "sumValues"
      | "totalAmount"
      | "transfer"
      | "usersMap"
      | "valueIndex"
      | "valuesByIndex"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Transfer" | "ValueAdded"): EventFragment;

  encodeFunctionData(
    functionFragment: "addValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "findUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAverageValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sumValues", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "usersMap",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "valueIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "valuesByIndex",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "findUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAverageValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sumValues", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usersMap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "valueIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "valuesByIndex",
    data: BytesLike
  ): Result;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, amount: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValueAddedEvent {
  export type InputTuple = [user: AddressLike, value: BigNumberish];
  export type OutputTuple = [user: string, value: bigint];
  export interface OutputObject {
    user: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FunctionGuzzlerOP extends BaseContract {
  connect(runner?: ContractRunner | null): FunctionGuzzlerOP;
  waitForDeployment(): Promise<this>;

  interface: FunctionGuzzlerOPInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addValue: TypedContractMethod<[newValue: BigNumberish], [void], "nonpayable">;

  deposit: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  findUser: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  getAverageValue: TypedContractMethod<[], [bigint], "view">;

  getBalance: TypedContractMethod<[target: AddressLike], [bigint], "view">;

  isRegistered: TypedContractMethod<[target: AddressLike], [boolean], "view">;

  registerUser: TypedContractMethod<[], [void], "nonpayable">;

  sumValues: TypedContractMethod<[], [bigint], "view">;

  totalAmount: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  usersMap: TypedContractMethod<
    [userAddress: AddressLike],
    [[bigint, boolean] & { balance: bigint; isRegistered: boolean }],
    "view"
  >;

  valueIndex: TypedContractMethod<[], [bigint], "view">;

  valuesByIndex: TypedContractMethod<[index: BigNumberish], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addValue"
  ): TypedContractMethod<[newValue: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "findUser"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getAverageValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[target: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isRegistered"
  ): TypedContractMethod<[target: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerUser"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sumValues"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "usersMap"
  ): TypedContractMethod<
    [userAddress: AddressLike],
    [[bigint, boolean] & { balance: bigint; isRegistered: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "valueIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "valuesByIndex"
  ): TypedContractMethod<[index: BigNumberish], [bigint], "view">;

  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "ValueAdded"
  ): TypedContractEvent<
    ValueAddedEvent.InputTuple,
    ValueAddedEvent.OutputTuple,
    ValueAddedEvent.OutputObject
  >;

  filters: {
    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "ValueAdded(address,uint256)": TypedContractEvent<
      ValueAddedEvent.InputTuple,
      ValueAddedEvent.OutputTuple,
      ValueAddedEvent.OutputObject
    >;
    ValueAdded: TypedContractEvent<
      ValueAddedEvent.InputTuple,
      ValueAddedEvent.OutputTuple,
      ValueAddedEvent.OutputObject
    >;
  };
}
